/*----- PROTECTED REGION ID(HdbConfigurationManagerClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        HdbConfigurationManagerClass.h
//
// description : Include for the HdbConfigurationManager root class.
//               This class is the singleton class for
//                the HdbConfigurationManager device class.
//               It contains all properties and methods which the 
//               HdbConfigurationManager requires only once e.g. the commands.
//
// project :     Hdb++ configuration manager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: graziano $
//
// $Revision: 1.2 $
// $Date: 2014-03-07 14:04:20 $
//
// $HeadURL$
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef HdbConfigurationManagerClass_H
#define HdbConfigurationManagerClass_H

#include <tango.h>
#include <HdbConfigurationManager.h>


/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManagerClass.h


namespace HdbConfigurationManager_ns
{
/*----- PROTECTED REGION ID(HdbConfigurationManagerClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManagerClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute AttributeOKNumber class definition
class AttributeOKNumberAttrib: public Tango::Attr
{
public:
	AttributeOKNumberAttrib():Attr("AttributeOKNumber",
			Tango::DEV_LONG, Tango::READ) {};
	~AttributeOKNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_AttributeOKNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeOKNumber_allowed(ty);}
};

//	Attribute AttributeNokNumber class definition
class AttributeNokNumberAttrib: public Tango::Attr
{
public:
	AttributeNokNumberAttrib():Attr("AttributeNokNumber",
			Tango::DEV_LONG, Tango::READ) {};
	~AttributeNokNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_AttributeNokNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeNokNumber_allowed(ty);}
};

//	Attribute AttributePendingNumber class definition
class AttributePendingNumberAttrib: public Tango::Attr
{
public:
	AttributePendingNumberAttrib():Attr("AttributePendingNumber",
			Tango::DEV_LONG, Tango::READ) {};
	~AttributePendingNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_AttributePendingNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributePendingNumber_allowed(ty);}
};

//	Attribute AttributeNumber class definition
class AttributeNumberAttrib: public Tango::Attr
{
public:
	AttributeNumberAttrib():Attr("AttributeNumber",
			Tango::DEV_LONG, Tango::READ) {};
	~AttributeNumberAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_AttributeNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeNumber_allowed(ty);}
};

//	Attribute SetAttributeName class definition
class SetAttributeNameAttrib: public Tango::Attr
{
public:
	SetAttributeNameAttrib():Attr("SetAttributeName",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~SetAttributeNameAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetAttributeName(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetAttributeName(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetAttributeName_allowed(ty);}
};

//	Attribute SetPollingPeriod class definition
class SetPollingPeriodAttrib: public Tango::Attr
{
public:
	SetPollingPeriodAttrib():Attr("SetPollingPeriod",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~SetPollingPeriodAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetPollingPeriod(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetPollingPeriod(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetPollingPeriod_allowed(ty);}
};

//	Attribute SetAbsoluteEvent class definition
class SetAbsoluteEventAttrib: public Tango::Attr
{
public:
	SetAbsoluteEventAttrib():Attr("SetAbsoluteEvent",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SetAbsoluteEventAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetAbsoluteEvent(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetAbsoluteEvent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetAbsoluteEvent_allowed(ty);}
};

//	Attribute SetRelativeEvent class definition
class SetRelativeEventAttrib: public Tango::Attr
{
public:
	SetRelativeEventAttrib():Attr("SetRelativeEvent",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~SetRelativeEventAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetRelativeEvent(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetRelativeEvent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetRelativeEvent_allowed(ty);}
};

//	Attribute SetPeriodEvent class definition
class SetPeriodEventAttrib: public Tango::Attr
{
public:
	SetPeriodEventAttrib():Attr("SetPeriodEvent",
			Tango::DEV_LONG, Tango::READ_WRITE) {};
	~SetPeriodEventAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetPeriodEvent(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetPeriodEvent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetPeriodEvent_allowed(ty);}
};

//	Attribute SetCodePushedEvent class definition
class SetCodePushedEventAttrib: public Tango::Attr
{
public:
	SetCodePushedEventAttrib():Attr("SetCodePushedEvent",
			Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~SetCodePushedEventAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetCodePushedEvent(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetCodePushedEvent(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetCodePushedEvent_allowed(ty);}
};

//	Attribute SetArchiver class definition
class SetArchiverAttrib: public Tango::Attr
{
public:
	SetArchiverAttrib():Attr("SetArchiver",
			Tango::DEV_STRING, Tango::READ_WRITE) {};
	~SetArchiverAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_SetArchiver(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->write_SetArchiver(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_SetArchiver_allowed(ty);}
};

//	Attribute ArchiverList class definition
class ArchiverListAttrib: public Tango::SpectrumAttr
{
public:
	ArchiverListAttrib():SpectrumAttr("ArchiverList",
			Tango::DEV_STRING, Tango::READ, 1000) {};
	~ArchiverListAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<HdbConfigurationManager *>(dev))->read_ArchiverList(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<HdbConfigurationManager *>(dev))->is_ArchiverList_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command AttributeAdd class definition
class AttributeAddClass : public Tango::Command
{
public:
	AttributeAddClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeAddClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeAddClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeAdd_allowed(any);}
};

//	Command AttributeRemove class definition
class AttributeRemoveClass : public Tango::Command
{
public:
	AttributeRemoveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeRemoveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeRemoveClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeRemove_allowed(any);}
};

//	Command AttributeStart class definition
class AttributeStartClass : public Tango::Command
{
public:
	AttributeStartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeStartClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeStartClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeStart_allowed(any);}
};

//	Command AttributeStop class definition
class AttributeStopClass : public Tango::Command
{
public:
	AttributeStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeStopClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeStopClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeStop_allowed(any);}
};

//	Command ArchiverAdd class definition
class ArchiverAddClass : public Tango::Command
{
public:
	ArchiverAddClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ArchiverAddClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ArchiverAddClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_ArchiverAdd_allowed(any);}
};

//	Command AttributeAssign class definition
class AttributeAssignClass : public Tango::Command
{
public:
	AttributeAssignClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeAssignClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeAssignClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeAssign_allowed(any);}
};

//	Command AttributeStatus class definition
class AttributeStatusClass : public Tango::Command
{
public:
	AttributeStatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeStatusClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeStatusClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeStatus_allowed(any);}
};

//	Command AttributeGetArchiver class definition
class AttributeGetArchiverClass : public Tango::Command
{
public:
	AttributeGetArchiverClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeGetArchiverClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeGetArchiverClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeGetArchiver_allowed(any);}
};

//	Command AttributeSearch class definition
class AttributeSearchClass : public Tango::Command
{
public:
	AttributeSearchClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	AttributeSearchClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~AttributeSearchClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_AttributeSearch_allowed(any);}
};

//	Command ArchiverRemove class definition
class ArchiverRemoveClass : public Tango::Command
{
public:
	ArchiverRemoveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ArchiverRemoveClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ArchiverRemoveClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_ArchiverRemove_allowed(any);}
};

//	Command ResetStatistics class definition
class ResetStatisticsClass : public Tango::Command
{
public:
	ResetStatisticsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	ResetStatisticsClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~ResetStatisticsClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<HdbConfigurationManager *>(dev))->is_ResetStatistics_allowed(any);}
};


/**
 *	The HdbConfigurationManagerClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  HdbConfigurationManagerClass : public Tango::DeviceClass
#else
class HdbConfigurationManagerClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(HdbConfigurationManagerClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManagerClass::Additionnal DServer data members

	//	Class properties data members
	public:
		//	DbHost:	
		string	dbHost;
		//	DbUser:	
		string	dbUser;
		//	DbPassword:	
		string	dbPassword;
		//	DbName:	
		string	dbName;
		//	DbPort:	
		Tango::DevShort	dbPort;
		//	MaxSearchSize:	
		Tango::DevLong	maxSearchSize;
	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static HdbConfigurationManagerClass *init(const char *);
		static HdbConfigurationManagerClass *instance();
		~HdbConfigurationManagerClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		HdbConfigurationManagerClass(string &);
		static HdbConfigurationManagerClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	HdbConfigurationManager_H
