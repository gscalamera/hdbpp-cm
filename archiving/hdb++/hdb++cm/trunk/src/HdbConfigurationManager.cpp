/*----- PROTECTED REGION ID(HdbConfigurationManager.cpp) ENABLED START -----*/
static const char *RcsId = "$Id: HdbConfigurationManager.cpp,v 1.3 2014-03-07 14:04:20 graziano Exp $";
//=============================================================================
//
// file :        HdbConfigurationManager.cpp
//
// description : C++ source for the HdbConfigurationManager class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               HdbConfigurationManager are implemented in this file.
//
// project :     Hdb++ configuration manager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author: graziano $
//
// $Revision: 1.3 $
// $Date: 2014-03-07 14:04:20 $
//
// $HeadURL$
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <HdbConfigurationManager.h>
#include <HdbConfigurationManagerClass.h>
#include <netdb.h> //for getaddrinfo

/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager.cpp

/**
 *  HdbConfigurationManager class description:
 *    
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name          |  Method name
//================================================================
//  State                 |  Inherited (no method)
//  Status                |  Inherited (no method)
//  AttributeAdd          |  attribute_add
//  AttributeRemove       |  attribute_remove
//  AttributeStart        |  attribute_start
//  AttributeStop         |  attribute_stop
//  ArchiverAdd           |  archiver_add
//  AttributeAssign       |  attribute_assign
//  AttributeStatus       |  attribute_status
//  AttributeGetArchiver  |  attribute_get_archiver
//  AttributeSearch       |  attribute_search
//  ArchiverRemove        |  archiver_remove
//  ResetStatistics       |  reset_statistics
//  AttributePause        |  attribute_pause
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  AttributeOKNumber            |  Tango::DevLong	Scalar
//  AttributeNokNumber           |  Tango::DevLong	Scalar
//  AttributePendingNumber       |  Tango::DevLong	Scalar
//  AttributeNumber              |  Tango::DevLong	Scalar
//  SetAttributeName             |  Tango::DevString	Scalar
//  SetPollingPeriod             |  Tango::DevLong	Scalar
//  SetAbsoluteEvent             |  Tango::DevDouble	Scalar
//  SetRelativeEvent             |  Tango::DevDouble	Scalar
//  SetPeriodEvent               |  Tango::DevLong	Scalar
//  SetCodePushedEvent           |  Tango::DevBoolean	Scalar
//  SetArchiver                  |  Tango::DevString	Scalar
//  AttributeMaxStoreTime        |  Tango::DevDouble	Scalar
//  AttributeMinStoreTime        |  Tango::DevDouble	Scalar
//  AttributeMaxProcessingTime   |  Tango::DevDouble	Scalar
//  AttributeMinProcessingTime   |  Tango::DevDouble	Scalar
//  AttributeRecordFreq          |  Tango::DevDouble	Scalar
//  AttributeFailureFreq         |  Tango::DevDouble	Scalar
//  AttributeStartedNumber       |  Tango::DevLong	Scalar
//  AttributeStoppedNumber       |  Tango::DevLong	Scalar
//  AttributeMaxPendingNumber    |  Tango::DevLong	Scalar
//  AttributePausedNumber        |  Tango::DevLong	Scalar
//  SetTTL                       |  Tango::DevULong	Scalar
//  ArchiverList                 |  Tango::DevString	Spectrum  ( max = 1000)
//  ArchiverStatus               |  Tango::DevString	Spectrum  ( max = 1000)
//  ArchiverStatisticsResetTime  |  Tango::DevDouble	Spectrum  ( max = 1000)
//================================================================

namespace HdbConfigurationManager_ns
{
/*----- PROTECTED REGION ID(HdbConfigurationManager::namespace_starting) ENABLED START -----*/

//	static initializations
map<string, string> HdbConfigurationManager::domain_map;

/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::HdbConfigurationManager()
 *	Description : Constructors for a Tango device
 *                implementing the classHdbConfigurationManager
 */
//--------------------------------------------------------
HdbConfigurationManager::HdbConfigurationManager(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(HdbConfigurationManager::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::constructor_1
}
//--------------------------------------------------------
HdbConfigurationManager::HdbConfigurationManager(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(HdbConfigurationManager::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::constructor_2
}
//--------------------------------------------------------
HdbConfigurationManager::HdbConfigurationManager(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(HdbConfigurationManager::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void HdbConfigurationManager::delete_device()
{
	DEBUG_STREAM << "HdbConfigurationManager::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	if(attr_ArchiverList_read != NULL)
		delete [] attr_ArchiverList_read;

	if(attr_ArchiverStatus_read != NULL)
		delete [] attr_ArchiverStatus_read;

	if(attr_ArchiverStatisticsResetTime_read != NULL)
		delete [] attr_ArchiverStatisticsResetTime_read;

	for(archiver_map_t::iterator it = archiverMap.begin(); it!= archiverMap.end(); it++)
	{
		if(it->second.dp != NULL)
			delete it->second.dp;
	}
	archiverMap.clear();
	
	delete mdb;

	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::delete_device
	delete[] attr_AttributeOKNumber_read;
	delete[] attr_AttributeNokNumber_read;
	delete[] attr_AttributePendingNumber_read;
	delete[] attr_AttributeNumber_read;
	delete[] attr_SetAttributeName_read;
	delete[] attr_SetPollingPeriod_read;
	delete[] attr_SetAbsoluteEvent_read;
	delete[] attr_SetRelativeEvent_read;
	delete[] attr_SetPeriodEvent_read;
	delete[] attr_SetCodePushedEvent_read;
	delete[] attr_SetArchiver_read;
	delete[] attr_AttributeMaxStoreTime_read;
	delete[] attr_AttributeMinStoreTime_read;
	delete[] attr_AttributeMaxProcessingTime_read;
	delete[] attr_AttributeMinProcessingTime_read;
	delete[] attr_AttributeRecordFreq_read;
	delete[] attr_AttributeFailureFreq_read;
	delete[] attr_AttributeStartedNumber_read;
	delete[] attr_AttributeStoppedNumber_read;
	delete[] attr_AttributeMaxPendingNumber_read;
	delete[] attr_AttributePausedNumber_read;
	delete[] attr_SetTTL_read;
}

//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void HdbConfigurationManager::init_device()
{
	DEBUG_STREAM << "HdbConfigurationManager::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	attr_ArchiverList_read = NULL;
	attr_ArchiverStatus_read = NULL;
	attr_ArchiverStatisticsResetTime_read = NULL;
/*	attr_AddCodePushedEvent_read = &attr_AddCodePushedEvent_write;
	attr_AddPollingPeriod_read = &attr_AddPollingPeriod_write;
	attr_AddAbsoluteEvent_read = &attr_AddAbsoluteEvent_write;
	attr_AddRelativeEvent_read = &attr_AddRelativeEvent_write;
	attr_AddPeriodEvent_read = &attr_AddPeriodEvent_write;*/
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_AttributeOKNumber_read = new Tango::DevLong[1];
	attr_AttributeNokNumber_read = new Tango::DevLong[1];
	attr_AttributePendingNumber_read = new Tango::DevLong[1];
	attr_AttributeNumber_read = new Tango::DevLong[1];
	attr_SetAttributeName_read = new Tango::DevString[1];
	attr_SetPollingPeriod_read = new Tango::DevLong[1];
	attr_SetAbsoluteEvent_read = new Tango::DevDouble[1];
	attr_SetRelativeEvent_read = new Tango::DevDouble[1];
	attr_SetPeriodEvent_read = new Tango::DevLong[1];
	attr_SetCodePushedEvent_read = new Tango::DevBoolean[1];
	attr_SetArchiver_read = new Tango::DevString[1];
	attr_AttributeMaxStoreTime_read = new Tango::DevDouble[1];
	attr_AttributeMinStoreTime_read = new Tango::DevDouble[1];
	attr_AttributeMaxProcessingTime_read = new Tango::DevDouble[1];
	attr_AttributeMinProcessingTime_read = new Tango::DevDouble[1];
	attr_AttributeRecordFreq_read = new Tango::DevDouble[1];
	attr_AttributeFailureFreq_read = new Tango::DevDouble[1];
	attr_AttributeStartedNumber_read = new Tango::DevLong[1];
	attr_AttributeStoppedNumber_read = new Tango::DevLong[1];
	attr_AttributeMaxPendingNumber_read = new Tango::DevLong[1];
	attr_AttributePausedNumber_read = new Tango::DevLong[1];
	attr_SetTTL_read = new Tango::DevULong[1];
	//	No longer if mandatory property not set. 
	if (mandatoryNotDefined)
		return;

	/*----- PROTECTED REGION ID(HdbConfigurationManager::init_device) ENABLED START -----*/
	
	//	Initialize device
	*attr_SetCodePushedEvent_read = false;
	*attr_SetAttributeName_read = CORBA::string_dup("");
	*attr_SetArchiver_read = CORBA::string_dup("");
	*attr_SetPeriodEvent_read = -1;
	*attr_SetRelativeEvent_read = -1;
	*attr_SetAbsoluteEvent_read = -1;
	*attr_SetPollingPeriod_read = -1;
	*attr_SetTTL_read = 0;
	archiver_t tmp;
	for(vector<string>::iterator it = archiverList.begin(); it!= archiverList.end(); it++)
	{
		try
		{
			tmp.dp = new Tango::DeviceProxy(*it);
		}
		catch(Tango::DevFailed &e)
		{
			tmp.dp = NULL;
		}
		string archname(*it);
		fix_tango_host(archname);
		DEBUG_STREAM << __func__<<": adding archiver:"<<archname;
		archiver_list_fix.push_back(archname);
		archiverMap.insert(make_pair(archname,tmp));
	}

	try
	{
		mdb = new HdbClient(libConfiguration);
	}
	catch (Tango::DevFailed &err)
	{
		ERROR_STREAM << __func__ << ": error connecting DB: " << err.errors[0].desc << endl;
		set_state(Tango::FAULT);
	}
	
#ifdef _USE_FERMI_DB_RW
	host_rw = "";
	Tango::Database *db = new Tango::Database();
	try
	{
		Tango::DbData db_data;
		db_data.push_back((Tango::DbDatum("Host")));
		db_data.push_back((Tango::DbDatum("Port")));
		db->get_property("Database",db_data);

		db_data[0] >> host_rw;
		db_data[1] >> port_rw;
	}catch(Tango::DevFailed &e)
	{
		ERROR_STREAM << __FUNCTION__ << " Error reading Database property='" << e.errors[0].desc << "'";
	}
	delete db;
#endif
	clock_gettime(CLOCK_MONOTONIC,&last_stat);
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::init_device
}

//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void HdbConfigurationManager::get_device_property()
{
	/*----- PROTECTED REGION ID(HdbConfigurationManager::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::get_device_property_before

	mandatoryNotDefined = false;

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ArchiverList"));
	dev_prop.push_back(Tango::DbDatum("MaxSearchSize"));
	dev_prop.push_back(Tango::DbDatum("LibConfiguration"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on HdbConfigurationManagerClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		HdbConfigurationManagerClass	*ds_class =
			(static_cast<HdbConfigurationManagerClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ArchiverList from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  archiverList;
		else {
			//	Try to initialize ArchiverList from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  archiverList;
		}
		//	And try to extract ArchiverList value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  archiverList;
		//	Property StartDsPath is mandatory, check if has been defined in database.
		check_mandatory_property(cl_prop, dev_prop[i]);

		//	Try to initialize MaxSearchSize from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  maxSearchSize;
		else {
			//	Try to initialize MaxSearchSize from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  maxSearchSize;
		}
		//	And try to extract MaxSearchSize value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  maxSearchSize;

		//	Try to initialize LibConfiguration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  libConfiguration;
		else {
			//	Try to initialize LibConfiguration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  libConfiguration;
		}
		//	And try to extract LibConfiguration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  libConfiguration;

	}

	/*----- PROTECTED REGION ID(HdbConfigurationManager::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::get_device_property_after
}
//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::check_mandatory_property()
 *	Description : For mandatory properties check if defined in database.
 */
//--------------------------------------------------------
void HdbConfigurationManager::check_mandatory_property(Tango::DbDatum &class_prop, Tango::DbDatum &dev_prop)
{
	//	Check if all properties are empty
	if (class_prop.is_empty() && dev_prop.is_empty())
	{
		TangoSys_OMemStream	tms;
		tms << endl <<"Property \'" << dev_prop.name;
		if (Tango::Util::instance()->_UseDb==true)
			tms << "\' is mandatory but not defined in database";
		else
			tms << "\' is mandatory but cannot be defined without database";
		string	status(get_status());
		status += tms.str();
		set_status(status);
		mandatoryNotDefined = true;
		/*----- PROTECTED REGION ID(HdbConfigurationManager::check_mandatory_property) ENABLED START -----*/
		cerr << tms.str() << " for " << device_name << endl;
		
		/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::check_mandatory_property
	}
}


//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void HdbConfigurationManager::always_executed_hook()
{
	DEBUG_STREAM << "HdbConfigurationManager::always_executed_hook()  " << device_name << endl;
	if (mandatoryNotDefined)
	{
		string	status(get_status());
		Tango::Except::throw_exception(
					(const char *)"PROPERTY_NOT_SET",
					status.c_str(),
					(const char *)"HdbConfigurationManager::always_executed_hook()");
	}
	/*----- PROTECTED REGION ID(HdbConfigurationManager::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	timespec now;
	clock_gettime(CLOCK_MONOTONIC,&now);
	if((now.tv_sec - last_stat.tv_sec + (double)(now.tv_nsec - last_stat.tv_nsec)/1e9) < 2.0)
	{
		return;
	}
	clock_gettime(CLOCK_MONOTONIC,&last_stat);
	bool archiver_fault = false;
	for(archiver_map_t::iterator itmap = archiverMap.begin(); itmap != archiverMap.end(); itmap++)
	{
		if(itmap->second.dp == NULL)
		{
			DEBUG_STREAM << __func__ << ": reconnecting to " << itmap->first;
			try
			{
				itmap->second.dp = new Tango::DeviceProxy(itmap->first.c_str());
			}
			catch(Tango::DevFailed &e)
			{
				itmap->second.dp = NULL;
			}
		}
		else
        {
			try
			{
				if (!itmap->second.dp->ping())
				{
					INFO_STREAM << "HdbConfigurationManager::always_executed_hook() Archiver " << itmap->first << " PING NOK" << endl;
					archiver_fault = true;
				}
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << "HdbConfigurationManager::always_executed_hook() Archiver " << itmap->first << " Exception" << endl;
				archiver_fault = true;
			}
        }
	}
	if(archiver_fault)
	{
		DEBUG_STREAM << __func__<<": setting state FAULT "<<endl;
		set_state(Tango::FAULT);
		set_status("At least one Archiver Not Responding");
		return;
	}
	Tango::DevState stat = Tango::ON;
	string status("Everything is OK");
	for(archiver_map_t::iterator itmap = archiverMap.begin(); itmap != archiverMap.end(); itmap++)
	{
		Tango::DevState stat_arch;
		Tango::DeviceAttribute Dout;
		try
		{
			if(itmap->second.dp)
			{
				Dout = itmap->second.dp->read_attribute("State");
				if(!Dout.is_empty())
				{
					Dout >> stat_arch;
					if(stat_arch != Tango::ON)
					{
						stat = Tango::ALARM;
						status = string("At least one signal is faulty");
						break;
					}
				}
			}
			else
			{
				stat = Tango::FAULT;
				string status("At least one Archiver Not Responding");
				break;
			}
		}
		catch(Tango::DevFailed &e)
		{
			INFO_STREAM << __func__<<": unable to read State from " << itmap->first;
			stat = Tango::FAULT;
			status = string("At least one Archiver Not Responding");
			break;
		}
	}
	set_state(stat);
	set_status(status);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "HdbConfigurationManager::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "HdbConfigurationManager::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute AttributeOKNumber related method
 *	Description: Number of archived attributes not in error
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeOKNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeOKNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeOKNumber) ENABLED START -----*/
	*attr_AttributeOKNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeOKNumber");
				Dout >> num;
				*attr_AttributeOKNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}

	//	Set the attribute value
	attr.set_value(attr_AttributeOKNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeOKNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeNokNumber related method
 *	Description: Number of archived attributes in error
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeNokNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeNokNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeNokNumber) ENABLED START -----*/
	*attr_AttributeNokNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeNokNumber");
				Dout >> num;
				*attr_AttributeNokNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}

	//	Set the attribute value
	attr.set_value(attr_AttributeNokNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeNokNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributePendingNumber related method
 *	Description: Number of attributes waiting to be archived
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributePendingNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributePendingNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributePendingNumber) ENABLED START -----*/
	*attr_AttributePendingNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributePendingNumber");
				Dout >> num;
				*attr_AttributePendingNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}

	//	Set the attribute value
	attr.set_value(attr_AttributePendingNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributePendingNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeNumber related method
 *	Description: Number of configured attributes
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeNumber) ENABLED START -----*/
	*attr_AttributeNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeNumber");
				Dout >> num;
				*attr_AttributeNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}

	//	Set the attribute value
	attr.set_value(attr_AttributeNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeNumber
}
//--------------------------------------------------------
/**
 *	Read attribute SetAttributeName related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetAttributeName(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetAttributeName(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetAttributeName) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetAttributeName_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetAttributeName
}
//--------------------------------------------------------
/**
 *	Write attribute SetAttributeName related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetAttributeName(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetAttributeName(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetAttributeName) ENABLED START -----*/
	string signame(w_val);
	fix_tango_host(signame);
	//remove white spaces:
	signame.erase (std::remove (signame.begin(), signame.end(), ' '), signame.end());
	
	string::size_type idx = signame.find_last_of("/");
	if (idx==string::npos)
		Tango::Except::throw_exception(
					(const char *)"SyntaxError",
					"Syntax error in signal name",
					(const char *)__func__);
	string devname = signame.substr(0, idx);
	string attname = signame.substr(idx+1);
	Tango::DeviceProxy *dp = new Tango::DeviceProxy(devname);
	vector<string> attrnames;
	try
	{
		attrnames.push_back(attname);
		Tango::AttributeInfoEx attr_info_ex;
		attr_info_ex = dp->get_attribute_config(attname);
		*attr_SetPollingPeriod_read = dp->get_attribute_poll_period(attname);
		original_SetPollingPeriod = *attr_SetPollingPeriod_read;
		string			archive_rel_change;
		string			archive_abs_change;
		string			archive_period;
		stringstream tmp;
		tmp << attr_info_ex.events.arch_event.archive_rel_change;
		tmp >> *attr_SetRelativeEvent_read;
		if(tmp.fail())
			*attr_SetRelativeEvent_read = 0;
		tmp.str("");
		tmp.clear(); // Clear state flags.
		tmp << attr_info_ex.events.arch_event.archive_abs_change;
		tmp >> *attr_SetAbsoluteEvent_read;
		if(tmp.fail())
			*attr_SetAbsoluteEvent_read = 0;
		tmp.str("");
		tmp.clear(); // Clear state flags.
		tmp << attr_info_ex.events.arch_event.archive_period;
		tmp >> *attr_SetPeriodEvent_read;
		if(tmp.fail())
			*attr_SetPeriodEvent_read = -1;
	} catch(Tango::DevFailed &e)
	{
		delete dp;
		INFO_STREAM << __func__<<": Error setting event properties="<<e.errors[0].desc;
		Tango::Except::re_throw_exception(e,
					(const char *)"Error",
					"Error in signal name",
					(const char *)__func__);
	} catch(CORBA::SystemException &e)
	{
		delete dp;
		INFO_STREAM << __func__<<": Error CORBA::SystemException setting ranges";
		Tango::Except::throw_exception(
					(const char *)"Error",
					"Error in signal name",
					(const char *)__func__);
	}
	catch(...)
	{
		delete dp;
		Tango::Except::throw_exception(
					(const char *)"Error",
					"Error in signal name",
					(const char *)__func__);
	}
	delete dp;
	*attr_SetAttributeName_read = CORBA::string_dup(signame.c_str());
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetAttributeName
}
//--------------------------------------------------------
/**
 *	Read attribute SetPollingPeriod related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetPollingPeriod(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetPollingPeriod(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetPollingPeriod) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetPollingPeriod_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetPollingPeriod
}
//--------------------------------------------------------
/**
 *	Write attribute SetPollingPeriod related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetPollingPeriod(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetPollingPeriod(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetPollingPeriod) ENABLED START -----*/
	string attrname(*attr_SetAttributeName_read);
	if(attrname.length() == 0)
	{
		Tango::Except::throw_exception( \
					(const char*)"Attribute not Defined", \
					(const char*)"Define first attribute to be added", \
					(const char*)__func__, Tango::ERR);
	}
	*attr_SetPollingPeriod_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetPollingPeriod
}
//--------------------------------------------------------
/**
 *	Read attribute SetAbsoluteEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetAbsoluteEvent(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetAbsoluteEvent(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetAbsoluteEvent) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetAbsoluteEvent_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetAbsoluteEvent
}
//--------------------------------------------------------
/**
 *	Write attribute SetAbsoluteEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetAbsoluteEvent(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetAbsoluteEvent(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetAbsoluteEvent) ENABLED START -----*/
	string attrname(*attr_SetAttributeName_read);
	if(attrname.length() == 0)
	{
		Tango::Except::throw_exception( \
					(const char*)"Attribute not Defined", \
					(const char*)"Define first attribute to be added", \
					(const char*)__func__, Tango::ERR);
	}
	*attr_SetAbsoluteEvent_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetAbsoluteEvent
}
//--------------------------------------------------------
/**
 *	Read attribute SetRelativeEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetRelativeEvent(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetRelativeEvent(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetRelativeEvent) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetRelativeEvent_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetRelativeEvent
}
//--------------------------------------------------------
/**
 *	Write attribute SetRelativeEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetRelativeEvent(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetRelativeEvent(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevDouble	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetRelativeEvent) ENABLED START -----*/
	string attrname(*attr_SetAttributeName_read);
	if(attrname.length() == 0)
	{
		Tango::Except::throw_exception( \
					(const char*)"Attribute not Defined", \
					(const char*)"Define first attribute to be added", \
					(const char*)__func__, Tango::ERR);
	}
	*attr_SetRelativeEvent_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetRelativeEvent
}
//--------------------------------------------------------
/**
 *	Read attribute SetPeriodEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetPeriodEvent(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetPeriodEvent(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetPeriodEvent) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetPeriodEvent_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetPeriodEvent
}
//--------------------------------------------------------
/**
 *	Write attribute SetPeriodEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetPeriodEvent(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetPeriodEvent(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetPeriodEvent) ENABLED START -----*/
	string attrname(*attr_SetAttributeName_read);
	if(attrname.length() == 0)
	{
		Tango::Except::throw_exception( \
					(const char*)"Attribute not Defined", \
					(const char*)"Define first attribute to be added", \
					(const char*)__func__, Tango::ERR);
	}
	*attr_SetPeriodEvent_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetPeriodEvent
}
//--------------------------------------------------------
/**
 *	Read attribute SetCodePushedEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetCodePushedEvent(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetCodePushedEvent(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetCodePushedEvent) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetCodePushedEvent_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetCodePushedEvent
}
//--------------------------------------------------------
/**
 *	Write attribute SetCodePushedEvent related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetCodePushedEvent(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetCodePushedEvent(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetCodePushedEvent) ENABLED START -----*/
	string attrname(*attr_SetAttributeName_read);
	if(attrname.length() == 0)
	{
		Tango::Except::throw_exception( \
					(const char*)"Attribute not Defined", \
					(const char*)"Define first attribute to be added", \
					(const char*)__func__, Tango::ERR);
	}
	*attr_SetCodePushedEvent_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetCodePushedEvent
}
//--------------------------------------------------------
/**
 *	Read attribute SetArchiver related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetArchiver(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetArchiver(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetArchiver) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetArchiver_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetArchiver
}
//--------------------------------------------------------
/**
 *	Write attribute SetArchiver related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetArchiver(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetArchiver(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevString	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetArchiver) ENABLED START -----*/
	string signame(w_val);
	fix_tango_host(signame);
	*attr_SetArchiver_read = CORBA::string_dup(signame.c_str());
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetArchiver
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMaxStoreTime related method
 *	Description: Maximum storing time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeMaxStoreTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeMaxStoreTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeMaxStoreTime) ENABLED START -----*/
	*attr_AttributeMaxStoreTime_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevDouble val;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeMaxStoreTime");
				Dout >> val;
				if(val > *attr_AttributeMaxStoreTime_read && val != -1)
					*attr_AttributeMaxStoreTime_read = val;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeMaxStoreTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeMaxStoreTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMinStoreTime related method
 *	Description: Minimum storing time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeMinStoreTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeMinStoreTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeMinStoreTime) ENABLED START -----*/
	*attr_AttributeMinStoreTime_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevDouble val;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeMinStoreTime");
				Dout >> val;
				if(*attr_AttributeMinStoreTime_read == 0)
					*attr_AttributeMinStoreTime_read = val;
				if(val < *attr_AttributeMinStoreTime_read && val != -1)
					*attr_AttributeMinStoreTime_read = val;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeMinStoreTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeMinStoreTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMaxProcessingTime related method
 *	Description: Maximum processing (from event reception to storage) time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeMaxProcessingTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeMaxProcessingTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeMaxProcessingTime) ENABLED START -----*/
	*attr_AttributeMaxProcessingTime_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevDouble val;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeMaxProcessingTime");
				Dout >> val;
				if(val > *attr_AttributeMaxProcessingTime_read && val != -1)
					*attr_AttributeMaxProcessingTime_read = val;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeMaxProcessingTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeMaxProcessingTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMinProcessingTime related method
 *	Description: Minimum processing (from event reception to storage) time
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeMinProcessingTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeMinProcessingTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeMinProcessingTime) ENABLED START -----*/
	*attr_AttributeMinProcessingTime_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevDouble val;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeMinProcessingTime");
				Dout >> val;
				if(*attr_AttributeMinProcessingTime_read == 0)
					*attr_AttributeMinProcessingTime_read = val;
				else if(val < *attr_AttributeMinProcessingTime_read && val != -1)
					*attr_AttributeMinProcessingTime_read = val;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeMinProcessingTime_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeMinProcessingTime
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeRecordFreq related method
 *	Description: Record frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeRecordFreq(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeRecordFreq(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeRecordFreq) ENABLED START -----*/
	*attr_AttributeRecordFreq_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			DEBUG_STREAM << "HdbConfigurationManager::read_AttributeRecordFreq(): going to read attr from "<<it->first << " attr_AttributeRecordFreq_read="<<*attr_AttributeRecordFreq_read<< endl;
			Tango::DeviceAttribute Dout;
			Tango::DevDouble num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeRecordFreq");
				Dout >> num;
				*attr_AttributeRecordFreq_read += num;
				DEBUG_STREAM << "HdbConfigurationManager::read_AttributeRecordFreq(): after read attr from "<<it->first << " attr_AttributeRecordFreq_read="<<*attr_AttributeRecordFreq_read<< endl;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeRecordFreq_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeRecordFreq
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeFailureFreq related method
 *	Description: Failure frequency
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeFailureFreq(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeFailureFreq(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeFailureFreq) ENABLED START -----*/
	*attr_AttributeFailureFreq_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevDouble num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeFailureFreq");
				Dout >> num;
				*attr_AttributeFailureFreq_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeFailureFreq_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeFailureFreq
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStartedNumber related method
 *	Description: Number of archived attributes started
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeStartedNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeStartedNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeStartedNumber) ENABLED START -----*/
	*attr_AttributeStartedNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeStartedNumber");
				Dout >> num;
				*attr_AttributeStartedNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeStartedNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeStartedNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeStoppedNumber related method
 *	Description: Number of archived attributes stopped
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeStoppedNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeStoppedNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeStoppedNumber) ENABLED START -----*/
	*attr_AttributeStoppedNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeStoppedNumber");
				Dout >> num;
				*attr_AttributeStoppedNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeStoppedNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeStoppedNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributeMaxPendingNumber related method
 *	Description: Max number of attributes waiting to be archived
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributeMaxPendingNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributeMaxPendingNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributeMaxPendingNumber) ENABLED START -----*/
	*attr_AttributeMaxPendingNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributeMaxPendingNumber");
				Dout >> num;
				*attr_AttributeMaxPendingNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributeMaxPendingNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributeMaxPendingNumber
}
//--------------------------------------------------------
/**
 *	Read attribute AttributePausedNumber related method
 *	Description: Number of archived attributes paused
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_AttributePausedNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_AttributePausedNumber(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_AttributePausedNumber) ENABLED START -----*/
	*attr_AttributePausedNumber_read = 0;
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
		{
			Tango::DeviceAttribute Dout;
			Tango::DevLong num;
			try
			{
				Dout = it->second.dp->read_attribute("AttributePausedNumber");
				Dout >> num;
				*attr_AttributePausedNumber_read += num;
			}
			catch(Tango::DevFailed &e)
			{
				INFO_STREAM << __func__<<": Error reading "<<it->first<<": "<<e.errors[0].desc;
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_AttributePausedNumber_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_AttributePausedNumber
}
//--------------------------------------------------------
/**
 *	Read attribute SetTTL related method
 *	Description: Time To Live for temporary storage in hours
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_SetTTL(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_SetTTL(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_SetTTL) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SetTTL_read);
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_SetTTL
}
//--------------------------------------------------------
/**
 *	Write attribute SetTTL related method
 *	Description: Time To Live for temporary storage in hours
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void HdbConfigurationManager::write_SetTTL(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::write_SetTTL(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevULong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(HdbConfigurationManager::write_SetTTL) ENABLED START -----*/
	*attr_SetTTL_read = w_val;
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::write_SetTTL
}
//--------------------------------------------------------
/**
 *	Read attribute ArchiverList related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 1000
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_ArchiverList(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_ArchiverList(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_ArchiverList) ENABLED START -----*/
	//	Set the attribute value
	archiver_list_str.clear();
	//vector<string>::iterator retlist = archiver_list_str.begin();
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		//retlist = copy(it->second.attr_list.begin(), it->second.attr_list.end(), retlist);
		archiver_list_str.push_back(it->first);
	}
	if(attr_ArchiverList_read != NULL)
		delete [] attr_ArchiverList_read;
	attr_ArchiverList_read = new Tango::DevString[archiver_list_str.size()];
	for (unsigned int i=0 ; i<archiver_list_str.size() ; i++)
		attr_ArchiverList_read[i] = (char *)archiver_list_str[i].c_str();

	attr.set_value(attr_ArchiverList_read, archiver_list_str.size());
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_ArchiverList
}
//--------------------------------------------------------
/**
 *	Read attribute ArchiverStatus related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 1000
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_ArchiverStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_ArchiverStatus(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_ArchiverStatus) ENABLED START -----*/
	//	Set the attribute value
	archiver_status_str.clear();
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		stringstream arch_status;
		arch_status << it->first;
		if(it->second.dp)
		{
			try
			{
				Tango::DeviceAttribute Dout_nok;
				Tango::DevLong num_nok;
				Dout_nok = it->second.dp->read_attribute("AttributeNokNumber");
				Dout_nok >> num_nok;
				Tango::DeviceAttribute Dout_tot;
				Tango::DevLong num_tot;
				Dout_tot = it->second.dp->read_attribute("AttributeNumber");
				Dout_tot >> num_tot;
				Tango::DeviceAttribute Dout_pend;
				Tango::DevLong num_pend;
				Dout_pend = it->second.dp->read_attribute("AttributePendingNumber");
				Dout_pend >> num_pend;
				Tango::DeviceAttribute Dout_state;
				Tango::DevState stat;
				Dout_state = it->second.dp->read_attribute("State");
				Dout_state >> stat;
				if(stat == Tango::ON)
					arch_status << "\tON\t";
				else if(stat == Tango::ALARM)
					arch_status << "\tALARM\t";
				else if(stat == Tango::FAULT)
					arch_status << "\tFAULT\t";
				arch_status << "\tNOK="<<num_nok<<"/"<<num_tot<<"\tPending="<<num_pend;
			}
			catch(Tango::DevFailed &e)
			{
				arch_status << "\tError='"<<e.errors[0].desc<<"'";
			}
		}
		else
		{
			arch_status << "\tNOT Connected";
		}
		archiver_status_str.push_back(arch_status.str());
	}
	if(attr_ArchiverStatus_read != NULL)
		delete [] attr_ArchiverStatus_read;
	attr_ArchiverStatus_read = new Tango::DevString[archiver_status_str.size()];
	for (unsigned int i=0 ; i<archiver_status_str.size() ; i++)
		attr_ArchiverStatus_read[i] = (char *)archiver_status_str[i].c_str();
	attr.set_value(attr_ArchiverStatus_read, archiver_status_str.size());
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_ArchiverStatus
}
//--------------------------------------------------------
/**
 *	Read attribute ArchiverStatisticsResetTime related method
 *	Description: Seconds elapsed since last statistics reset
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Spectrum max = 1000
 */
//--------------------------------------------------------
void HdbConfigurationManager::read_ArchiverStatisticsResetTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "HdbConfigurationManager::read_ArchiverStatisticsResetTime(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::read_ArchiverStatisticsResetTime) ENABLED START -----*/
	//	Set the attribute value
	archiver_statistics_reset_time.clear();
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		stringstream arch_status;
		arch_status << it->first;
		Tango::DevDouble srtime=0.0;
		if(it->second.dp)
		{
			try
			{
				Tango::DeviceAttribute Dout;
				Dout = it->second.dp->read_attribute("StatisticsResetTime");
				Dout >> srtime;
			}
			catch(Tango::DevFailed &e)
			{
			}
		}
		archiver_statistics_reset_time.push_back(srtime);
	}
	if(attr_ArchiverStatisticsResetTime_read != NULL)
		delete [] attr_ArchiverStatisticsResetTime_read;
	attr_ArchiverStatisticsResetTime_read = new Tango::DevDouble[archiver_statistics_reset_time.size()];
	for (unsigned int i=0 ; i<archiver_statistics_reset_time.size() ; i++)
		attr_ArchiverStatisticsResetTime_read[i] = archiver_statistics_reset_time[i];
	attr.set_value(attr_ArchiverStatisticsResetTime_read, archiver_statistics_reset_time.size());
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::read_ArchiverStatisticsResetTime
}

//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void HdbConfigurationManager::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(HdbConfigurationManager::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command AttributeAdd related method
 *	Description: Add a new attribute to archive in HDB.
 *
 */
//--------------------------------------------------------
void HdbConfigurationManager::attribute_add()
{
	DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_add) ENABLED START -----*/
	
	//	Add your own code
	string signame(*attr_SetAttributeName_read);
	string archname = find_archiver(signame);

	archiver_map_t::iterator itmapnew = archiverMap.find(archname);
	if(itmapnew != archiverMap.end())
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' already archived by '"<<archname<<"'";
		Tango::Except::throw_exception( \
					(const char*)"Already archived", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	archname=string(*attr_SetArchiver_read);
	itmapnew = archiverMap.find(archname);
	if(itmapnew == archiverMap.end())
	{
		stringstream tmp;
		tmp << "Archiver '" << archname << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Archiver not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	//------1: check attribute with event parameters-----------------------
	string::size_type idx = signame.find_last_of("/");
	if (idx==string::npos)
		Tango::Except::throw_exception(
					(const char *)"SyntaxError",
					"Syntax error in signal name",
					(const char *)__func__);
	string devname = signame.substr(0, idx);
	string attname = signame.substr(idx+1);
	Tango::DeviceProxy *dp = new Tango::DeviceProxy(devname);

	Tango::AttributeInfo	info = dp->get_attribute_config(attname);
	int data_type = info.data_type;
	int data_format = info.data_format;
	int write_type = info.writable;
	DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - data_type=" << data_type<<" Tango::DEV_STATE="<<Tango::DEV_STATE<< " Tango::DEV_BOOLEAN="<<Tango::DEV_BOOLEAN<< endl;
	bool just_polling = false;
	if(data_type == Tango::DEV_STATE || data_type == Tango::DEV_BOOLEAN || data_type == Tango::DEV_STRING)
	{
		just_polling = true;
	}

	if(!(*attr_SetCodePushedEvent_read || (*attr_SetPollingPeriod_read > 0 && (just_polling || *attr_SetAbsoluteEvent_read > 0 || *attr_SetRelativeEvent_read > 0 || *attr_SetPeriodEvent_read > 0))))
	{
		stringstream tmp;
		tmp << "Event properties wrongly configured";
		Tango::Except::throw_exception( \
					(const char*)"Event properties wrongly configured", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	//------2: set attribute with event parameters-------------------------

	vector<string> attrnames;
	try
	{
		attrnames.push_back(attname);

		//read actual attribute config
		Tango::AttributeInfoListEx *attr_info_list_ex;
		DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - before read attribute config attr="<<attname;
		attr_info_list_ex = dp->get_attribute_config_ex(attrnames);
		DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - read attribute config size=" << attr_info_list_ex->size() << endl;
		bool changed=false;

		for(Tango::AttributeInfoListEx::iterator it=attr_info_list_ex->begin(); it != attr_info_list_ex->end(); it++)
		{
			if(*attr_SetRelativeEvent_read != 0)
			{
				stringstream tmp;
				tmp << *attr_SetRelativeEvent_read;
				it->events.arch_event.archive_rel_change = tmp.str();
				changed=true;
				DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - setting archive_rel_change=" << tmp.str() << endl;
			}
			if(*attr_SetAbsoluteEvent_read != 0)
			{
				stringstream tmp;
				tmp << *attr_SetAbsoluteEvent_read;
				it->events.arch_event.archive_abs_change = tmp.str();
				changed=true;
				DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - setting archive_abs_change=" << tmp.str() << endl;
			}
			if(*attr_SetPeriodEvent_read > 0)
			{
				stringstream tmp;
				tmp << *attr_SetPeriodEvent_read;
				it->events.arch_event.archive_period = tmp.str();
				changed=true;
				DEBUG_STREAM << "HdbConfigurationManager::AttributeAdd()  - setting archive_period=" << tmp.str() << endl;
			}
		}
		if(changed)
			dp->set_attribute_config(*attr_info_list_ex);


		DEBUG_STREAM<<"after  set_attribute_config";
		//write polling only if changed
		if(*attr_SetPollingPeriod_read != 0 && original_SetPollingPeriod != *attr_SetPollingPeriod_read)
		{
			dp->poll_attribute(attname,*attr_SetPollingPeriod_read);
		}

	} catch(Tango::DevFailed &e)
	{
		INFO_STREAM << "Error setting event config="<<e.errors[0].desc;
	} catch(CORBA::SystemException &e)
	{
		INFO_STREAM << "Error CORBA::SystemException setting event config";
	}
	catch(...)
	{
	}
	delete dp;
	//------3: Configure DB------------------------------------------------
	int res = mdb->configure_Attr(signame, data_type, data_format, write_type, *attr_SetTTL_read);
	if(res < 0)
	{
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					(const char*)"Configuration query error", \
					(const char*)__func__, Tango::ERR);
/*		Tango::DeviceData Din;
		Din << signame;
		itmapnew->second.dp->command_inout("AttributeRemove",Din);*/
	}
	//------4: Assign to existing EventSubscriber--------------------------
	if(itmapnew->second.dp)
	{
		Tango::DeviceData Din;
		Din << signame;
		itmapnew->second.dp->command_inout("AttributeAdd",Din);
	}
	else
	{
		stringstream tmp;
		tmp << "Archiver " << itmapnew->first << " Not Responding";
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_add
}
//--------------------------------------------------------
/**
 *	Command AttributeRemove related method
 *	Description: Remove attribute from configuration.
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbConfigurationManager::attribute_remove(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::AttributeRemove()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_remove) ENABLED START -----*/
	
	//	Add your own code
	string signame(argin);
	fix_tango_host(signame);
	string archname = find_archiver(signame);
	archiver_map_t::iterator itmap = archiverMap.find(archname);
	if(itmap == archiverMap.end())
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Attribute not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	Tango::DeviceData Din;
	Din << signame;
	if(itmap->second.dp)
	{
		itmap->second.dp->command_inout("AttributeRemove",Din);
	}
	else
	{
		stringstream tmp;
		tmp << "Archiver " << itmap->first << " Not Responding";
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_remove
}
//--------------------------------------------------------
/**
 *	Command AttributeStart related method
 *	Description: Start archiving single attribute
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbConfigurationManager::attribute_start(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::AttributeStart()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_start) ENABLED START -----*/
	
	//	Add your own code
	string signame(argin);
	fix_tango_host(signame);
	string archname = find_archiver(signame);
	DEBUG_STREAM << __func__<<": found archname=" << archname << " for signame=" << signame << endl;

	archiver_map_t::iterator itmap = archiverMap.find(archname);
	if(itmap == archiverMap.end())
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Attribute not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	if(itmap->second.dp)
	{
		Tango::DeviceData Din;
		Din << signame;
		itmap->second.dp->command_inout("AttributeStart",Din);
	}
	else
	{
		stringstream tmp;
		tmp << "Archiver " << itmap->first << " Not Responding";
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_start
}
//--------------------------------------------------------
/**
 *	Command AttributeStop related method
 *	Description: Stop archiving single attribute
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbConfigurationManager::attribute_stop(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::AttributeStop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_stop) ENABLED START -----*/
	
	//	Add your own code
	string signame(argin);
	fix_tango_host(signame);
	string archname = find_archiver(signame);
	DEBUG_STREAM << __func__<<": found archname=" << archname << " for signame=" << signame << endl;

	archiver_map_t::iterator itmap = archiverMap.find(archname);
	if(itmap == archiverMap.end())
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Attribute not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	if(itmap->second.dp)
	{
		Tango::DeviceData Din;
		Din << signame;
		itmap->second.dp->command_inout("AttributeStop",Din);
	}
	else
	{
		stringstream tmp;
		tmp << "Archiver " << itmap->first << " Not Responding";
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_stop
}
//--------------------------------------------------------
/**
 *	Command ArchiverAdd related method
 *	Description: Add a new archiver to archive in HDB.
 *
 *	@param argin Archiver name
 */
//--------------------------------------------------------
void HdbConfigurationManager::archiver_add(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::ArchiverAdd()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::archiver_add) ENABLED START -----*/
	
	//	Add your own code
	string archname(argin);
	string arch_host = get_only_tango_host(archname);
	if(arch_host.find(":")==string::npos)
		Tango::Except::throw_exception( \
					(const char*)"Bad Tango host", \
					(const char*)"Bad Tango host", \
					(const char*)__func__, Tango::ERR);
	fix_tango_host(archname);

	vector<string>::iterator itlist = find(archiver_list_fix.begin(), archiver_list_fix.end(), archname);
	archiver_map_t::iterator itmap = archiverMap.find(archname);

	if(itmap != archiverMap.end() || itlist != archiver_list_fix.end())
	{
		stringstream tmp;
		tmp << "Archiver '" << archname << "' already present";
		Tango::Except::throw_exception( \
					(const char*)"Archiver already present", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	archiver_list_fix.push_back(archname);
	archiver_t tmp;
	try
	{
		tmp.dp = new Tango::DeviceProxy(archname);
	}
	catch(Tango::DevFailed &e)
	{
		tmp.dp = NULL;
	}
	archiverMap.insert(make_pair(archname,tmp));

	Tango::DbData	data;
	data.push_back(Tango::DbDatum("ArchiverList"));
	data[0]  <<  archiver_list_fix;
#ifndef _USE_FERMI_DB_RW
	Tango::Database *db = new Tango::Database();
#else
	//save properties using host_rw e port_rw to connect to database
	Tango::Database *db;
	if(host_rw != "")
		db = new Tango::Database(host_rw,port_rw);
	else
		db = new Tango::Database();
	DEBUG_STREAM << __func__<<": connecting to db "<<host_rw<<":"<<port_rw;
#endif
	try
	{
		db->set_timeout_millis(10000);
		db->put_device_property(this->get_name(), data);
	}
	catch(Tango::DevFailed &e)
	{
		stringstream o;
		o << " Error saving properties='" << e.errors[0].desc << "'";
		WARN_STREAM << __func__<< o.str();
	}
	delete db;

	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::archiver_add
}
//--------------------------------------------------------
/**
 *	Command AttributeAssign related method
 *	Description: Assigne attribute to archiver
 *
 *	@param argin [0]: Attribute name
 *               [1]: Archiver name
 */
//--------------------------------------------------------
void HdbConfigurationManager::attribute_assign(const Tango::DevVarStringArray *argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::AttributeAssign()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_assign) ENABLED START -----*/
	
	//	Add your own code
	if(argin->length() != 2)
		Tango::Except::throw_exception( \
					(const char*)"Bad parameters", \
					(const char*)"Needed 2 parameters", \
					(const char*)__func__, Tango::ERR);
	string signame((*argin)[0]);
	string archname((*argin)[1]);
	fix_tango_host(signame);
	fix_tango_host(archname);

	archiver_map_t::iterator itmapnew = archiverMap.find(archname);
	if(itmapnew == archiverMap.end())
	{
		stringstream tmp;
		tmp << "Archiver '" << archname << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Archiver not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	bool removed = false;
	for(archiver_map_t::iterator itmap = archiverMap.begin(); itmap != archiverMap.end(); itmap++)
	{
		Tango::DeviceAttribute Dout;
		try
		{
			if(itmap->second.dp)
			{
				Dout = itmap->second.dp->read_attribute("AttributeList");
				if(!Dout.is_empty())
					Dout >> itmap->second.attr_list;
			}
			else
			{
				INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
				itmap->second.attr_list.clear();
			}
		}
		catch(Tango::DevFailed &e)
		{
			INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
			itmap->second.attr_list.clear();
		}
		for(vector<string>::iterator itattr = itmap->second.attr_list.begin(); itattr != itmap->second.attr_list.end(); itattr++)
		{
			if(signame.length() != 0 && !compare_tango_names(*itattr,signame) && !compare_tango_names(signame,*itattr))	//compare -> '<' -> want *itattr==signame
			{
				string status;
				Tango::DeviceData Din;
				Din << signame;
				itmap->second.dp->command_inout("AttributeRemove",Din);
				itmap = archiverMap.end();
				removed = true;
				break;
			}
		}
	}
	if(!removed)
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Attribute not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	if(itmapnew->second.dp)
	{
		Tango::DeviceData Din;
		Din << signame;
		itmapnew->second.dp->command_inout("AttributeAdd",Din);
	}
	else
	{
		stringstream tmp;
		tmp << "Archiver " << itmapnew->first << " Not Responding";
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_assign
}
//--------------------------------------------------------
/**
 *	Command AttributeStatus related method
 *	Description: Read an attribute status
 *
 *	@param argin The attribute name
 *	@returns The attribute status. TODO: DevString OK?
 */
//--------------------------------------------------------
Tango::DevString HdbConfigurationManager::attribute_status(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "HdbConfigurationManager::AttributeStatus()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_status) ENABLED START -----*/
	
	//	Add your own code
	bool found=false;
	string signame(argin);
	fix_tango_host(signame);
	for(archiver_map_t::iterator itmap = archiverMap.begin(); itmap != archiverMap.end(); itmap++)
	{
		Tango::DeviceAttribute Dout;
		try
		{
			if(itmap->second.dp)
			{
				Dout = itmap->second.dp->read_attribute("AttributeList");
				if(!Dout.is_empty())
					Dout >> itmap->second.attr_list;
			}
			else
			{
				INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
				itmap->second.attr_list.clear();
			}
		}
		catch(Tango::DevFailed &e)
		{
			INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
			itmap->second.attr_list.clear();
		}
		for(vector<string>::iterator itattr = itmap->second.attr_list.begin(); itattr != itmap->second.attr_list.end() && !found; itattr++)
		{
			if(signame.length() != 0 && !compare_tango_names(*itattr,signame) && !compare_tango_names(signame,*itattr))	//compare -> '<' -> want *itattr==signame
			{
				string status;
				Tango::DeviceData Din, Dout;
				Din << signame;
				Dout = itmap->second.dp->command_inout("AttributeStatus",Din);
				Dout >> status;
				status += string("\nArchiver: ") + itmap->first;
				argout = CORBA::string_dup(status.c_str());
				found = true;
				break;
			}
		}
	}
	if(!found)
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Archiver not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_status
	return argout;
}
//--------------------------------------------------------
/**
 *	Command AttributeGetArchiver related method
 *	Description: Return archiver associated to attribute.
 *
 *	@param argin Attribute name
 *	@returns Archiver name
 */
//--------------------------------------------------------
Tango::DevString HdbConfigurationManager::attribute_get_archiver(Tango::DevString argin)
{
	Tango::DevString argout;
	DEBUG_STREAM << "HdbConfigurationManager::AttributeGetArchiver()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_get_archiver) ENABLED START -----*/
	
	//	Add your own code
	string signame(argin);
	string archiver = find_archiver(signame);
	/*if(archiver == "")
	{
		Tango::Except::throw_exception( \
					(const char*)"Not Found", \
					(const char*)"Not found", \
					(const char*)__func__, Tango::ERR);
	}*/
	
	argout = CORBA::string_dup(archiver.c_str());
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_get_archiver
	return argout;
}
//--------------------------------------------------------
/**
 *	Command AttributeSearch related method
 *	Description: Return list of attributes containing input argument
 *
 *	@param argin Attribute name or part of it
 *	@returns Attribute list
 */
//--------------------------------------------------------
Tango::DevVarStringArray *HdbConfigurationManager::attribute_search(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_search) ENABLED START -----*/
	
	//	Add your own code
	attribute_search_list_str.clear();
	vector<string> complete_list;
	vector<string>::iterator retlist = complete_list.begin();
	DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - 0 complete list -> size=" << complete_list.size() << endl;
	for(archiver_map_t::iterator itmap = archiverMap.begin(); itmap != archiverMap.end(); itmap++)
	{
		Tango::DeviceAttribute Dout;
		try
		{
			if(itmap->second.dp)
			{
				Dout = itmap->second.dp->read_attribute("AttributeList");
				if(!Dout.is_empty())
					Dout >> itmap->second.attr_list;
			}
			else
			{
				INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
				itmap->second.attr_list.clear();
			}
		}
		catch(Tango::DevFailed &e)
		{
			INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
			itmap->second.attr_list.clear();
		}
		DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - partial list -> size=" << itmap->second.attr_list.size() << endl;
		complete_list.insert(complete_list.end(),itmap->second.attr_list.begin(), itmap->second.attr_list.end());
		/*vector<string>::iterator tmplist;
		tmplist = copy(it->second.attr_list.begin(), it->second.attr_list.end(), complete_list.begin());
		retlist = tmplist;*/
		DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - building complete list -> size=" << complete_list.size() << endl;
	}


	string filter(argin);
	size_t found;
	for(vector<string>::iterator it = complete_list.begin(); it != complete_list.end(); it++)
	{
		found = 0;
		if(filter.length() != 0)
		{
			found = it->find(filter);
		}
		if((filter.length() == 0) || (found != string::npos))
		{
			attribute_search_list_str.push_back(*it);
			DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - found: " << *it << endl;
			if(attribute_search_list_str.size() >= maxSearchSize)
				break;
		}
	}
	DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - found list -> size=" << attribute_search_list_str.size() << endl;

	argout = new Tango::DevVarStringArray();
	argout->length(attribute_search_list_str.size());
	int i = 0;
	for (vector<string>::iterator it= attribute_search_list_str.begin(); it != attribute_search_list_str.end(); it++)
	{
		DEBUG_STREAM << "HdbConfigurationManager::AttributeSearch()  - result list -> copying=" << *it << endl;
		(*argout)[i] = CORBA::string_dup(it->c_str());
		i++;
	}
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_search
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ArchiverRemove related method
 *	Description: Remove archiver instance.
 *
 *	@param argin Archiver name
 */
//--------------------------------------------------------
void HdbConfigurationManager::archiver_remove(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::ArchiverRemove()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::archiver_remove) ENABLED START -----*/
	
	//	Add your own code
	string archname(argin);
	fix_tango_host(archname);

	vector<string>::iterator itlist = find(archiver_list_fix.begin(), archiver_list_fix.end(), archname);
	archiver_map_t::iterator itmap = archiverMap.find(archname);

	if(itmap == archiverMap.end() || itlist == archiver_list_fix.end())
	{
		stringstream tmp;
		tmp << "Archiver '" << archname << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Archiver not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}

	//remove(archiverList.begin(), archiverList.end(), archname);
	archiver_list_fix.erase(itlist);
	if(itmap->second.dp != NULL)
		delete itmap->second.dp;
	archiverMap.erase(itmap);

	Tango::DbData	data;
	data.push_back(Tango::DbDatum("ArchiverList"));
	data[0]  <<  archiver_list_fix;
#ifndef _USE_FERMI_DB_RW
	Tango::Database *db = new Tango::Database();
#else
	//save properties using host_rw e port_rw to connect to database
	Tango::Database *db;
	if(host_rw != "")
		db = new Tango::Database(host_rw,port_rw);
	else
		db = new Tango::Database();
	DEBUG_STREAM << __func__<<": connecting to db "<<host_rw<<":"<<port_rw;
#endif
	try
	{
		db->set_timeout_millis(10000);
		db->put_device_property(this->get_name(), data);
	}
	catch(Tango::DevFailed &e)
	{
		stringstream o;
		o << " Error saving properties='" << e.errors[0].desc << "'";
		WARN_STREAM << __func__<< o.str();
	}
	delete db;
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::archiver_remove
}
//--------------------------------------------------------
/**
 *	Command ResetStatistics related method
 *	Description: Reset statistic counters
 *
 */
//--------------------------------------------------------
void HdbConfigurationManager::reset_statistics()
{
	DEBUG_STREAM << "HdbConfigurationManager::ResetStatistics()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::reset_statistics) ENABLED START -----*/
	
	//	Add your own code
	for(archiver_map_t::iterator it = archiverMap.begin(); it != archiverMap.end(); it++)
	{
		if(it->second.dp)
			it->second.dp->command_inout("ResetStatistics");
		else
			INFO_STREAM << __func__ << ": unable to ResetStatistics on " << it->first;
	}
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::reset_statistics
}
//--------------------------------------------------------
/**
 *	Command AttributePause related method
 *	Description: Pause archiving single attribute
 *
 *	@param argin Attribute name
 */
//--------------------------------------------------------
void HdbConfigurationManager::attribute_pause(Tango::DevString argin)
{
	DEBUG_STREAM << "HdbConfigurationManager::AttributePause()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(HdbConfigurationManager::attribute_pause) ENABLED START -----*/
	
	//	Add your own code
	string signame(argin);
	fix_tango_host(signame);
	string archname = find_archiver(signame);
	DEBUG_STREAM << __func__<<": found archname=" << archname << " for signame=" << signame << endl;
	archiver_map_t::iterator itmap = archiverMap.find(archname);
	if(itmap == archiverMap.end())
	{
		stringstream tmp;
		tmp << "Attribute '" << signame << "' not found";
		Tango::Except::throw_exception( \
					(const char*)"Attribute not found", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	if(itmap->second.dp)
	{
		Tango::DeviceData Din;
		Din << signame;
		itmap->second.dp->command_inout("AttributePause",Din);
	}
	else
	{
		stringstream tmp;
		tmp << "Archiver " << itmap->first << " Not Responding";
		Tango::Except::throw_exception( \
					(const char*)"Error", \
					tmp.str(), \
					(const char*)__func__, Tango::ERR);
	}
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::attribute_pause
}
//--------------------------------------------------------
/**
 *	Method      : HdbConfigurationManager::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void HdbConfigurationManager::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(HdbConfigurationManager::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::add_dynamic_commands
}

/*----- PROTECTED REGION ID(HdbConfigurationManager::namespace_ending) ENABLED START -----*/

//=============================================================================
//=============================================================================
void HdbConfigurationManager::fix_tango_host(string &attr)
{
	std::transform(attr.begin(), attr.end(), attr.begin(), (int(*)(int))tolower);		//transform to lowercase
	string::size_type	start = attr.find("tango://");
	//if not fqdn, add TANGO_HOST
	if (start == string::npos)
	{
		//TODO: get from device/class/global property
		char	*env = getenv("TANGO_HOST");
		if (env==NULL)
		{
			return;
		}
		else
		{
			string	s(env);
			add_domain(s);
			attr = string("tango://") + s + "/" + attr;
			return;
		}
	}
	string facility = get_only_tango_host(attr);
	add_domain(facility);
	string attr_name = get_only_attr_name(attr);
	attr = string("tango://")+ facility + string("/") + attr_name;
}
//=============================================================================
//=============================================================================
#ifndef _MULTI_TANGO_HOST
void HdbConfigurationManager::add_domain(string &str)
{
	string::size_type	end1 = str.find(".");
	if (end1 == string::npos)
	{
		//get host name without tango://
		string::size_type	start = str.find("tango://");
		if (start == string::npos)
		{
			start = 0;
		}
		else
		{
			start = 8;	//tango:// len
		}
		string::size_type	end2 = str.find(":", start);

		string th = str.substr(start, end2);
		string with_domain = str;

		map<string,string>::iterator it_domain = domain_map.find(th);
		if(it_domain != domain_map.end())
		{
			with_domain = it_domain->second;
			//cout << __func__ <<": found domain in map -> " << with_domain<<endl;
			str = with_domain;
			return;
		}

		struct addrinfo hints;
//		hints.ai_family = AF_INET; // use AF_INET6 to force IPv6
//		hints.ai_flags = AI_CANONNAME|AI_CANONIDN;
		memset(&hints, 0, sizeof hints);
		hints.ai_family = AF_UNSPEC; /*either IPV4 or IPV6*/
		hints.ai_socktype = SOCK_STREAM;
		hints.ai_flags = AI_CANONNAME;
		struct addrinfo *result, *rp;
		int ret = getaddrinfo(th.c_str(), NULL, &hints, &result);
		if (ret != 0)
		{
			cout << __func__<< ": getaddrinfo error='" << gai_strerror(ret)<<"' while looking for " << th<<endl;
			return;
		}

		for (rp = result; rp != NULL; rp = rp->ai_next)
		{
			with_domain = string(rp->ai_canonname) + str.substr(end2);
			//cout << __func__ <<": found domain -> " << with_domain<<endl;
			domain_map.insert(make_pair(th, with_domain));
		}
		freeaddrinfo(result); // all done with this structure
		str = with_domain;
		return;
	}
	else
	{
		return;
	}
}
#else
void HdbConfigurationManager::add_domain(string &str)
{
	string strresult="";
	string facility(str);
	vector<string> facilities;
	if(str.find(",") == string::npos)
	{
		facilities.push_back(facility);
	}
	else
	{
		string_explode(facility,",",&facilities);
	}
	for(vector<string>::iterator it = facilities.begin(); it != facilities.end(); it++)
	{
		string::size_type	end1 = it->find(".");
		if (end1 == string::npos)
		{
			//get host name without tango://
			string::size_type	start = it->find("tango://");
			if (start == string::npos)
			{
				start = 0;
			}
			else
			{
				start = 8;	//tango:// len
			}
			string::size_type end2 = it->find(":", start);
			if (end2 == string::npos)
			{
				strresult += *it;
				if(it != facilities.end()-1)
					strresult += ",";
				continue;
			}
			string th = it->substr(start, end2);
			string port = it->substr(end2);
			string with_domain = *it;

			map<string,string>::iterator it_domain = domain_map.find(th);
			if(it_domain != domain_map.end())
			{
				with_domain = it_domain->second;
				//cout << __func__ <<": found domain in map -> " << with_domain<<endl;
				strresult += with_domain+port;
				if(it != facilities.end()-1)
					strresult += ",";
				continue;
			}

			struct addrinfo hints;
//			hints.ai_family = AF_INET; // use AF_INET6 to force IPv6
//			hints.ai_flags = AI_CANONNAME|AI_CANONIDN;
			memset(&hints, 0, sizeof hints);
			hints.ai_family = AF_UNSPEC; /*either IPV4 or IPV6*/
			hints.ai_socktype = SOCK_STREAM;
			hints.ai_flags = AI_CANONNAME;
			struct addrinfo *result, *rp;
			int ret = getaddrinfo(th.c_str(), NULL, &hints, &result);
			if (ret != 0)
			{
				cout << __func__<< ": getaddrinfo error='" << gai_strerror(ret)<<"' while looking for " << th<<endl;
				strresult += th+port;
				if(it != facilities.end()-1)
					strresult += ",";
				continue;
			}

			for (rp = result; rp != NULL; rp = rp->ai_next)
			{
				with_domain = string(rp->ai_canonname) + it->substr(end2);
				domain_map.insert(make_pair(th, string(rp->ai_canonname)));
			}
			freeaddrinfo(result); // all done with this structure
			strresult += with_domain;
			if(it != facilities.end()-1)
				strresult += ",";
			continue;
		}
		else
		{
			strresult += *it;
			if(it != facilities.end()-1)
				strresult += ",";
			continue;
		}
	}
	str = strresult;
}
#endif

string HdbConfigurationManager::get_only_attr_name(string str)
{
	string::size_type	start = str.find("tango://");
	if (start == string::npos)
		return str;
	else
	{
		start += 8; //	"tango://" length
		start = str.find('/', start);
		start++;
		string	signame = str.substr(start);
		return signame;
	}
}

string HdbConfigurationManager::get_only_tango_host(string str)
{
	string::size_type	start = str.find("tango://");
	if (start == string::npos)
	{
		return "unknown";
	}
	else
	{
		start += 8; //	"tango://" length
		string::size_type	end = str.find('/', start);
		string th = str.substr(start, end-start);
		return th;
	}
}

string HdbConfigurationManager::find_archiver(string signame)
{
	//DEBUG_STREAM << __func__<< ": entering with " << signame;
	string archiver("");
	fix_tango_host(signame);
	for(archiver_map_t::iterator itmap = archiverMap.begin(); itmap != archiverMap.end(); itmap++)
	{
		Tango::DeviceAttribute Dout;
		try
		{
			if(itmap->second.dp)
			{
				Dout = itmap->second.dp->read_attribute("AttributeList");
				if(!Dout.is_empty())
					Dout >> itmap->second.attr_list;
			}
			else
			{
				INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
				itmap->second.attr_list.clear();
			}
		}
		catch(Tango::DevFailed &e)
		{
			INFO_STREAM << __func__<<": unable to read AttributeList from " << itmap->first;
			itmap->second.attr_list.clear();
		}
		for(vector<string>::iterator itattr = itmap->second.attr_list.begin(); itattr != itmap->second.attr_list.end(); itattr++)
		{
			if(signame.length() != 0 && !compare_tango_names(*itattr,signame) && !compare_tango_names(signame,*itattr))	//compare -> '<' -> want *itattr==signame
			{
//				DEBUG_STREAM << __func__<< ": FOUND " << *itattr;
				archiver = itmap->first;
				itmap == archiverMap.end();
				break;
			}
		}
	}
	return archiver;
}
#ifndef _MULTI_TANGO_HOST
string HdbConfigurationManager::remove_domain(string str)
{
	string::size_type	end1 = str.find(".");
	if (end1 == string::npos)
	{
		return str;
	}
	else
	{
		string::size_type	start = str.find("tango://");
		if (start == string::npos)
		{
			start = 0;
		}
		else
		{
			start = 8;	//tango:// len
		}
		string::size_type	end2 = str.find(":", start);
		if(end1 > end2)	//'.' not in the tango host part
			return str;
		string th = str.substr(0, end1);
		th += str.substr(end2, str.size()-end2);
		return th;
	}
}
#else
string HdbConfigurationManager::remove_domain(string str)
{
	string result="";
	string facility(str);
	vector<string> facilities;
	if(str.find(",") == string::npos)
	{
		facilities.push_back(facility);
	}
	else
	{
		string_explode(facility,",",&facilities);
	}
	for(vector<string>::iterator it = facilities.begin(); it != facilities.end(); it++)
	{
		string::size_type	end1 = it->find(".");
		if (end1 == string::npos)
		{
			result += *it;
			if(it != facilities.end()-1)
				result += ",";
			continue;
		}
		else
		{
			string::size_type	start = it->find("tango://");
			if (start == string::npos)
			{
				start = 0;
			}
			else
			{
				start = 8;	//tango:// len
			}
			string::size_type	end2 = it->find(":", start);
			if(end1 > end2)	//'.' not in the tango host part
			{
				result += *it;
				if(it != facilities.end()-1)
					result += ",";
				continue;
			}
			string th = it->substr(0, end1);
			th += it->substr(end2, it->size()-end2);
			result += th;
			if(it != facilities.end()-1)
				result += ",";
			continue;
		}
	}
	return result;
}
#endif

bool HdbConfigurationManager::compare_without_domain(string str1, string str2)
{
	string str1_nd = remove_domain(str1);
	string str2_nd = remove_domain(str2);
	return (str1_nd==str2_nd);
}

//return false if str1 >= str2
bool compare_tango_names(string str1, string str2)
{
//	cout << __func__<< ": entering with '" << str1<<"' - '" << str2<<"'" << endl;
	if(str1 == str2)
	{
//		cout << __func__<< ": EQUAL 1 -> '" << str1<<"'=='" << str2<<"'" << endl;
		return false;
	}
	HdbConfigurationManager::fix_tango_host(str1);
	HdbConfigurationManager::fix_tango_host(str2);
	if(str1 == str2)
	{
//		cout << __func__<< ": EQUAL 2 -> '" << str1<<"'=='" << str2<<"'" << endl;
		return false;
	}
#ifdef _MULTI_TANGO_HOST
	string facility1 = HdbConfigurationManager::get_only_tango_host(str1);
	string attr_name1 = HdbConfigurationManager::get_only_attr_name(str1);
	string facility2 = HdbConfigurationManager::get_only_tango_host(str2);
	string attr_name2 = HdbConfigurationManager::get_only_attr_name(str2);
	//if attr only part is different -> different
	if(attr_name1 != attr_name2)
		return attr_name1<attr_name2;

	//check combination of multiple tango hosts
	vector<string> facilities1;
	HdbConfigurationManager::string_explode(facility1,",",&facilities1);
	vector<string> facilities2;
	HdbConfigurationManager::string_explode(facility2,",",&facilities2);
	for(vector<string>::iterator it1=facilities1.begin(); it1!=facilities1.end(); it1++)
	{
		for(vector<string>::iterator it2=facilities2.begin(); it2!=facilities2.end(); it2++)
		{
			string name1 = string("tango://")+ *it1 + string("/") + attr_name1;
			string name2 = string("tango://")+ *it2 + string("/") + attr_name2;
			if(name1 == name2)
				return false;
		}
	}
#endif
	string str1_nd = HdbConfigurationManager::remove_domain(str1);
	string str2_nd = HdbConfigurationManager::remove_domain(str2);
	if(str1_nd == str2_nd)
	{
//		cout << __func__<< ": EQUAL 3 -> '" << str1_nd<<"'=='" << str2_nd<<"'" << endl;
		return false;
	}
#ifdef _MULTI_TANGO_HOST
	string facility1_nd = HdbConfigurationManager::get_only_tango_host(str1_nd);
	string attr_name1_nd = HdbConfigurationManager::get_only_attr_name(str1_nd);
	string facility2_nd = HdbConfigurationManager::get_only_tango_host(str2_nd);
	string attr_name2_nd = HdbConfigurationManager::get_only_attr_name(str2_nd);
	//check combination of multiple tango hosts
	vector<string> facilities1_nd;
	HdbConfigurationManager::string_explode(facility1_nd,",",&facilities1_nd);
	vector<string> facilities2_nd;
	HdbConfigurationManager::string_explode(facility2_nd,",",&facilities2_nd);
	for(vector<string>::iterator it1=facilities1_nd.begin(); it1!=facilities1_nd.end(); it1++)
	{
		for(vector<string>::iterator it2=facilities2_nd.begin(); it2!=facilities2_nd.end(); it2++)
		{
			string name1 = string("tango://")+ *it1 + string("/") + attr_name1;
			string name2 = string("tango://")+ *it2 + string("/") + attr_name2;
			if(name1 == name2)
				return false;
		}
	}
#endif
	bool result=str1_nd<str2_nd;
//	cout << __func__<< ": DIFFERENTS -> '" << str1_nd<< (result ? "'<'" : "'>'") << str2_nd<<"'" << endl;
	return result;
}
#ifdef _MULTI_TANGO_HOST
void HdbConfigurationManager::string_explode(string str, string separator, vector<string>* results)
{
	string::size_type found;

	found = str.find_first_of(separator);
	while(found != string::npos) {
		if(found > 0) {
			results->push_back(str.substr(0,found));
		}
		str = str.substr(found+1);
		found = str.find_first_of(separator);
	}
	if(str.length() > 0) {
		results->push_back(str);
	}

}
#endif

/*----- PROTECTED REGION END -----*/	//	HdbConfigurationManager::namespace_ending
} //	namespace
